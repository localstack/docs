{
  "applications": [
    {
      "title": "Serverless Container-based APIs with Amazon ECS & API Gateway",
      "description": "Deploy a Full-Stack Serverless Web application, and deploy it with Terraform & CloudFormation on LocalStack",
      "url": "https://github.com/localstack/serverless-api-ecs-apigateway-sample",
      "teaser": "https://raw.githubusercontent.com/localstack/serverless-api-ecs-apigateway-sample/main/images/serverless-container-api.png",
      "services": ["ddb", "agw", "iam", "cgn", "ecs","s3"],
      "deployment":  ["terraform", "awscli","cloudformation"],
      "platform": ["javascript"],
      "tags": ["serverless-containers", "security", "identity", "compliance"],
      "complexity": ["intermediate"],
      "pro": true,
      "cloudPods": false
    },
    {
      "title": "Full-Stack application with AWS Lambda, DynamoDB & S3 for shipment validation",
      "description": "Configure a CRUD web application for shipment validation & listing, and deploy it with Terraform on LocalStack",
      "url": "https://github.com/localstack/shipment-list-demo",
      "teaser": "https://raw.githubusercontent.com/localstack/shipment-list-demo/master/app_diagram.png",
      "services": ["s3", "ddb", "lmb", "iam", "cwl", "sns", "sqs"],
      "deployment":  ["terraform"],
      "platform": ["java", "javascript"],
      "tags": ["spring-boot", "lambda-trigger"],
      "complexity": ["intermediate"],
      "pro": false,
      "cloudPods": false
    },
    {
      "title": "Step-up Authentication using Amazon Cognito",
      "description": "Setup a Step-up Authentication workflow for a higher level of security, deployed using Cloud Development Kit on LocalStack",
      "url": "https://github.com/localstack/step-up-auth-sample",
      "teaser": "https://raw.githubusercontent.com/localstack/step-up-auth-sample/main/images/step-up-architecture.png",
      "services": ["agw", "lmb", "ddb", "cgn", "clf", "s3", "ecr", "ebr", "cfr", "ssm"],
      "deployment":  ["cdk", "awscli"],
      "platform": ["typescript","javascript"],
      "tags": ["step-up-auth", "rule-based-authentication", "localsurf"],
      "complexity": ["advanced"],
      "pro": true,
      "cloudPods": true
    },
    {
      "title": "Serverless microservices with Amazon API Gateway, DynamoDB, SQS, and Lambda",
      "description": "Serverless microservices for managing friend state in gaming services asynchronously deployed using Cloud Development Kit on LocalStack",
      "url": "https://github.com/localstack/microservices-apigateway-lambda-dynamodb-sqs-sample",
      "teaser": "https://raw.githubusercontent.com/localstack/microservices-apigateway-lambda-dynamodb-sqs-sample/main/images/microservices-apigateway-lambda-dynamodb-sqs-sample-architecture.png",
      "services": ["lmb", "agw", "ddb", "sqs","agw", "clf", "s3", "ecr", "ebr", "kns", "iam", "ssm"],
      "deployment":  ["cdk", "awscli"],
      "platform": ["typescript", "javascript"],
      "tags": ["serverless", "microservices"],
      "complexity": ["basic"],
      "pro": true,
      "cloudPods": false
    },
    {
      "title": "Event-driven architecture with Amazon SNS FIFO, DynamoDB, Lambda, and S3",
      "description": "Event-driven architecture demonstrating a recruiting agency application deployed using Serverless Application Model on LocalStack",
      "url": "https://github.com/localstack/event-driven-architecture-with-amazon-sns-fifo",
      "teaser": "https://raw.githubusercontent.com/localstack/event-driven-architecture-with-amazon-sns-fifo/master/images/architecture.png",
      "services": ["sqs", "lmb", "ddb", "sns", "s3", "clf","ebr", "cwl", "iam"],
      "deployment":  ["sam"],
      "platform": ["python"],
      "tags": ["serverless", "event-driven-architecture"],
      "complexity": ["intermediate"],
      "pro": true,
      "cloudPods": false
    },
    {
      "title": "Note-Taking application using AWS SDK for JavaScript",
      "description": "Serverless Note-Taking application demonstrating a Web Application built using Lambda, API Gateway, and DynamoDB deployed using CDK on LocalStack",
      "url": "https://github.com/localstack/aws-sdk-js-notes-app",
      "teaser": "https://raw.githubusercontent.com/localstack-samples/sample-notes-app-dynamodb-lambda-apigateway/main/images/aws-sdk-js-notes.png",
      "services": [ "lmb", "ddb","clf", "cwl", "iam", "s3", "sns", "ebr", "sqs"],
      "deployment":  ["awscli", "cdk"],
      "platform": ["typescript", "javascript"],
      "tags": ["serverless"],
      "complexity": ["basic"],
      "pro": true,
      "cloudPods": false
    },
    {
      "title": "Serverless Image Resizer with AWS Lambda, S3, SNS, and SES",
      "description": "Serverless Image Resizer demonstrating a Web Application to resize upload images using S3 & Lambda with SNS to SES Subscriptions on LocalStack",
      "url": "https://github.com/localstack/serverless-image-resizer",
      "teaser": "https://user-images.githubusercontent.com/3996682/229322761-92f52eec-5bfb-412a-a3cb-8af4ee1fed24.png",
      "services": ["s3", "lmb", "sns", "ses", "ebr","cwl","ssm"],
      "deployment":  ["awscli"],
      "platform": ["python"],
      "tags": ["serverless"],
      "complexity": ["intermediate"],
      "pro": true,
      "cloudPods": true
    },
    {
      "title": "Query data in S3 Bucket with Amazon Athena, Glue Catalog & CloudFormation",
      "description": "Leverage Amazon Athena to run standard SQL to analyze a large amount of data in Amazon S3 buckets deployed using CloudFormation on LocalStack",
      "url": "https://github.com/localstack/query-data-s3-athena-glue-sample",
      "teaser": "https://raw.githubusercontent.com/localstack/query-data-s3-athena-glue-sample/main/images/architecture.png",
      "services": ["s3", "ath", "glu", "clf"],
      "deployment":  ["awscli"],
      "platform": [],
      "tags" : ["big-data", "data-analytics"],
      "complexity": ["intermediate"],
      "pro": true,
      "cloudPods": false
    },
    {
      "title": "AppSync GraphQL APIs for DynamoDB and RDS Aurora PostgreSQL",
      "description": "Proxy data from different resources such as DynamoDB tables & RDS databases using AppSync GraphQL APIs deployed using Serverless Framework on LocalStack",
      "url": "https://github.com/localstack/appsync-graphql-api-sample",
      "teaser": "https://raw.githubusercontent.com/localstack/appsync-graphql-api-sample/main/images/appsync-datasource-architecture.png",
      "services": ["rds", "ddb", "app"],
      "deployment":  ["serverless"],
      "platform": ["python"],
      "tags" : ["graphql", "appsync", "databases", "rds", "dynamodb"],
      "complexity": ["intermediate"],
      "pro": true,
      "cloudPods": false
    },
    {
      "title": "MNIST handwritten digit recognition model running on a local SageMaker endpoint",
      "description": "Full-Stack application showcasing the deployment and invocation of a SageMaker endpoint on LocalStack",
      "url": "https://github.com/localstack/mnist-sagemaker",
      "teaser": "https://raw.githubusercontent.com/localstack/mnist-sagemaker/main/assets/architecture-diagram.png",
      "services": ["sgm", "lmb", "s3"],
      "deployment":  ["serverless"],
      "platform": ["javascript"],
      "tags" : ["machine-learning", "serverless"],
      "complexity": ["intermediate"],
      "pro": true,
      "cloudPods": false
    },
    {
      "title": "Loan Broker application with AWS Step Functions, DynamoDB, Lambda, SQS, and SNS",
      "description": "Serverless architecture demonstrating a Loan Broker application with a a Recipient List pattern and a Scatter Gather pattern deployed using Cloud Development Kit (CDK) on LocalStack",
      "url": "https://github.com/localstack/loan-broker-stepfunctions-lambda-app",
      "teaser": "https://raw.githubusercontent.com/localstack/loan-broker-stepfunctions-lambda-app/main/images/architecture-diagram.png",
      "services": ["ddb", "lmb", "sqs", "sns", "stf"],
      "deployment":  ["cdk"],
      "platform": ["typescript", "javascript"],
      "tags": ["serverless"],
      "complexity": ["advanced"],
      "pro": false,
      "cloudPods": false
    },
    {
      "title": "Amazon RDS initialization using CDK, Lambda, ECR, and Secrets Manager",
      "description": "Amazon RDS initialization using CDK and CloudFormation Custom Resources with Lambda functions for compute layer and running queries against the deployed database on LocalStack",
      "url": "https://github.com/localstack/amazon-rds-init-cdk",
      "teaser": "https://raw.githubusercontent.com/localstack/amazon-rds-init-cdk/main/images/architecture-diagram.png",
      "services": ["rds", "lmb", "ecr", "sec"],
      "deployment":  ["cdk"],
      "platform": ["typescript"],
      "tags": ["databases", "rds"],
      "complexity": ["intermediate"],
      "pro": true,
      "cloudPods": false
    },
    {
      "title": "Messaging Processing application with SQS, DynamoDB, and Fargate",
      "description": "Messaging Processing application that demonstrates a Fargate container that interacts with SQS & DynamoDB, deployed using Cloud Development Kit on LocalStack",
      "url": "https://github.com/localstack/sqs-fargate-ddb-cdk-go",
      "teaser": "https://raw.githubusercontent.com/localstack/sqs-fargate-ddb-cdk-go/main/images/architecture-diagram.png",
      "services": ["sqs", "ddb", "fargate"],
      "deployment":  ["cdk"],
      "platform": ["go"],
      "tags": ["serverless"],
      "complexity": ["basic"],
      "pro": true,
      "cloudPods": false
    },
    {
      "title": "Serverless Transcription application using Transcribe, S3, Lambda, SQS, and SES",
      "description": "Transcription sample application simplifies and streamlines the process of transcribing audio files and deployed using Serverless Framework on LocalStack",
      "url": "https://github.com/localstack/sample-transcribe-app",
      "teaser": "https://raw.githubusercontent.com/localstack/sample-transcribe-app/main/images/architecture-diagram.png",
      "services": ["s3", "lmb", "sqs", "ses", "trc"],
      "deployment":  ["serverless"],
      "platform": ["javascript"],
      "tags": ["serverless"],
      "complexity": ["intermediate"],
      "pro": true,
      "cloudPods": false
    },
    {
      "title": "Search application with Lambda, Kinesis, Firehose, ElasticSearch, S3",
      "description": "Fuzzy Search application demonstrates how to fuzzy-search a movie database using various AWS services, deployed using Terraform and AWS CLI on LocalStack",
      "url": "https://github.com/localstack/sample-fuzzy-movie-search-lambda-kinesis-elasticsearch",
      "teaser": "https://raw.githubusercontent.com/localstack/sample-fuzzy-movie-search-lambda-kinesis-elasticsearch/main/images/system_overview.png",
      "services": ["s3", "lmb", "kns", "es"],
      "deployment": ["terraform"],
      "platform": ["python", "javascript"],
      "tags": ["serverless", "event-driven-architecture"],
      "complexity": ["intermediate"],
      "pro": true,
      "cloudpods": false
    },
    {
      "title": "Serverless RDS Proxy with API Gateway, Lambda, and Aurora RDS",
      "description": "Serverless RDS Proxy demonstrates how Aurora cluster can be accessed with and without using a proxy, deployed using Serverless Application Model on LocalStack",
      "url": "https://github.com/localstack-samples/sample-serverless-rds-proxy-demo/",
      "teaser": "https://raw.githubusercontent.com/localstack-samples/sample-serverless-rds-proxy-demo/main/images/architecture.png",
      "services": ["rds", "lmb", "agw"],
      "deployment": ["sam"],
      "platform": ["python", "javascript"],
      "tags": ["rds-proxy"],
      "complexity": ["intermediate"],
      "pro": true,
      "cloudpods": false
    },
    {
      "title": "Producer & Consumer Example using EventBridge, Lambda, and CloudWatch",
      "description": "Producer & Consumer example demonstrates how Lambda functions are coupled with EventBridge rule, deployed using using Serverless Application Model on LocalStack",
      "url": "https://github.com/localstack-samples/sample-eventbridge-producer-consumer",
      "teaser": "https://raw.githubusercontent.com/localstack-samples/sample-eventbridge-producer-consumer/master/images/architecture-diagram.png",
      "services": ["lmb", "cwl", "ebr"],
      "deployment": ["sam"],
      "platform": ["javascript"],
      "tags": ["eventbridge", "event-driven-architecture"],
      "complexity": ["basic"],
      "pro": true,
      "cloudpods": false
    },
    {
      "title": "DynamoDB ingestion into S3 with Kinesis Data Streams and Kinesis Data Firehose",
      "description": "Sample applications delivers DynamoDB records to an S3 bucket using Kinesis Data Streams and Kinesis Data Firehose using Cloud Development Kit L3 constructs on LocalStack",
      "url": "https://github.com/localstack-samples/sample-dynamodb-kinesisfirehose-s3-ingestion",
      "teaser": "https://raw.githubusercontent.com/localstack-samples/sample-dynamodb-kinesisfirehose-s3-ingestion/main/dynamodb-kinesisfirehose-s3-ingestion.png",
      "services": ["ddb", "kns", "s3"],
      "deployment": ["cdk"],
      "platform": ["typescript","javascript"],
      "tags": ["serverless", "etl", "analytics"],
      "complexity": ["advanced"],
      "pro": true,
      "cloudpods": false
    },
    {
      "title": "Anti-Corruption Layer pattern with .NET, API Gateway, Lambda, and DynamoDB",
      "description": "Sample application demonstrating Anti-Corruption Layer pattern with API Gateway, DynamoDB, and Lambda, deployed using Cloud Development Kit on LocalStack",
      "url": "https://github.com/localstack-samples/sample-anti-corruption-layer-pattern",
      "teaser": "https://raw.githubusercontent.com/localstack-samples/sample-anti-corruption-layer-pattern/main/anti-corruption-layer-pattern.png",
      "services": ["ddb", "agw", "lmb"],
      "deployment": ["cdk"],
      "platform": ["dotnet"],
      "tags": ["serverless", "anti-corruption-layer"],
      "complexity": ["intermediate"],
      "pro": false,
      "cloudpods": false
    },
    {
      "title": "Serverless Shopping Cart with API Gateway, Lambda, Cognito, SQS, DynamoDB, and Amplify SDK",
      "description": "Sample application demonstrating a Serverless Shopping Cart microservice with an integrated frontend, deployed using Serverless Application Model on LocalStack",
      "url": "https://github.com/localstack-samples/sample-serverless-shopping-cart-apigateway-lambda-cognito",
      "teaser": "https://raw.githubusercontent.com/localstack-samples/sample-serverless-shopping-cart-apigateway-lambda-cognito/master/images/architecture-diagram.png",
      "services": ["ddb", "agw", "lmb", "cgn", "sqs"],
      "deployment": ["sam"],
      "platform": ["javascript"],
      "tags": ["serverless", "microservices"],
      "complexity": ["intermediate"],
      "pro": true,
      "cloudpods": false
    },
    {
      "title": "Event-driven architecture with SQS, Lambda, and DynamoDB",
      "description": "Event-driven architecture demonstrates an inventory management system that streamlines inventory operations, deployed using Cloud Development Kit on LocalStack",
      "url": "https://github.com/localstack-samples/sample-sqs-lambda-dynamodb",
      "teaser": "https://raw.githubusercontent.com/localstack-samples/sample-sqs-lambda-dynamodb/main/images/architecture-diagram.png",
      "services": ["ddb", "lmb", "sqs"],
      "deployment": ["cdk"],
      "platform": ["typescript","javascript"],
      "tags": ["serverless", "event-driven-architecture"],
      "complexity": ["intermediate"],
      "pro": false,
      "cloudpods": false
    },
    {
      "title": "Route53 Failover with FIS",
      "description": "LocalStack's integration of Fault Injection Simulator (FIS) with Route53 enables automatic user diversion to a secondary zone during primary region failures, enhancing system resilience and ensuring uninterrupted service.",
      "url": "https://github.com/localstack-samples/samples-chaos-engineering/tree/main/route53-failover",
      "teaser": "https://raw.githubusercontent.com/localstack-samples/samples-chaos-engineering/main/route53-failover/images/route53-product-stack.png",
      "services": ["ddb", "lmb", "agw", "r53", "fis"],
      "deployment": ["awscli"],
      "platform": ["java","python"],
      "tags": ["chaos-engineering", "dns-failover", "fault-injection"],
      "complexity": ["advanced"],
      "pro": true,
      "cloudpods": false
    },
    {
      "title": "Building resilient systems with API Gateway, Lambda, DynamoDB and FIS",
      "description": "Using AWS Fault Injection Simulator (FIS) for controlled DynamoDB outages, this test demonstrates software resilience by implementing queuing strategies to handle database downtime and maintain system operations.",
      "url": "https://github.com/localstack-samples/samples-chaos-engineering/tree/main/FIS-experiments",
      "teaser": "https://github.com/localstack-samples/samples-chaos-engineering/blob/main/FIS-experiments/images/dark-fis-after-sqs.png?raw=true",
      "services": ["ddb", "lmb", "agw", "fis"],
      "deployment": ["awscli"],
      "platform": ["java"],
      "tags": ["chaos-engineering", "fault-injection"],
      "complexity": ["advanced"],
      "pro": true,
      "cloudpods": false
    },
    {
      "title": "Multi-IaC DevOps pipeline with Lambda, S3 & API Gateway",
      "description": "Serverless applicaton deploying API Gateway, Lambda, S3, and other resources for DevOps with multiple IaC flavors, local integration testing with PyTest, Lambda Hot reloading, and environment configuration that deploys to LocalStack and AWS",
      "url": "https://github.com/localstack-samples/multi-iac-devops",
      "teaser": "https://raw.githubusercontent.com/localstack-samples/multi-iac-devops/main/docs/img/localstack-architecture-diagram.png",
      "services": ["s3", "lmb", "agw"],
      "deployment": ["pulumi", "terraform", "cdk"],
      "platform": ["typescript", "python"],
      "tags": ["devops", "iac", "serverless"],
      "complexity": ["basic"],
      "pro": false,
      "cloudpods": false
    },
    {
      "title": "Deploy LocalStack to AWS EKS with Fargate or EKS Anywhere with Docker",
      "description": "Hybrid integration environment for component/integration/system tests, creating a manageable testing platform with LocalStack on K8s, Dev Containers, and Elastic Kubernetes Service",
      "url": "https://github.com/localstack-samples/localstack-on-eks",
      "teaser": "https://raw.githubusercontent.com/localstack-samples/localstack-on-eks/main/docs/localstack-eks-aws-architecture-diagram.png",
      "services": ["eks"],
      "deployment": ["helm-charts"],
      "platform": ["yaml"],
      "tags": ["kubernetes", "testing"],
      "complexity": ["advanced"],
      "pro": true,
      "cloudpods": false
    },
    {
      "title": "Serverless application with Lambda, DynamoDB, API Gateway, and an AppConfig Lambda Layer",
      "description": "Sample application demonstrating how to run integration tests against a locally-deployed serverless application, deployed using Cloud Development Kit on LocalStack",
      "url": "https://github.com/localstack-samples/lambda-ddb",
      "teaser": "https://raw.githubusercontent.com/localstack-samples/lambda-ddb/main/docs/img/lambda-ddb-appconfig-architecture-diagram.png",
      "services": ["ddb", "lmb", "agw", "appconfig"],
      "deployment": ["cdk"],
      "platform": ["typescript", "python"],
      "tags": ["serverless", "integration-testing"],
      "complexity": ["intermediate"],
      "pro": true,
      "cloudpods": false
    },
    {
      "title": "Node.js application with Elastic Container Service and Application Load Balancer", 
      "description": "Sample application demonstrating how to run a Node server container on Fargate within an ECS cluster alongside an Application Load Balancer, deployed using Cloud Development Kit on LocalStack",
      "url": "https://github.com/localstack-samples/sample-cdk-ecs-elb",
      "teaser": "https://raw.githubusercontent.com/localstack-samples/sample-cdk-ecs-elb/main/docs/img/sample-cdk-ecs-elb-architecture-diagram.png",
      "services": ["ecs", "ecr", "elb"],
      "deployment": ["cdk"],
      "platform": ["javascript", "typescript"],
      "tags": ["containers", "fargate", "load-balancer"],
      "complexity": ["intermediate"],
      "pro": true,
      "cloudpods": false
    },
    {
      "title": "Deploying Lambda and an API Gateway on LocalStack with an authorizer",
      "description": "Sample application demonstrating how to create a Lambda function and an API Gateway with an authorizer, deployed using Serverless Application Model on LocalStack",
      "url": "https://github.com/localstack-samples/lambda-sam-authorizer/",
      "teaser": "https://raw.githubusercontent.com/localstack-samples/lambda-sam-authorizer/main/docs/img/localstack-architecture.png",
      "services": ["lmb", "agw"],
      "deployment": ["sam"],
      "platform": ["javascript"],
      "tags": ["serverless", "authorizer"],
      "complexity": ["basic"],
      "pro": true,
      "cloudpods": false
    },
    {
      "title": "Deploying a data pipeline connecting Kinesis Event Stream to Data Firehose to Redshift",
      "description": "Sample application demonstrating how to create a data streaming pipeline with an example producer & consumer, deployed using Cloud Development Kit on LocalStack",
      "url": "https://github.com/localstack-samples/sample-cdk-kinesis-firehose-redshift",
      "teaser": "https://raw.githubusercontent.com/localstack-samples/sample-cdk-kinesis-firehose-redshift/main/architecture-diagram.png",
      "services": ["kns", "s3", "rs"],
      "deployment": ["cdk"],
      "platform": ["python"],
      "tags": ["data-engineering", "data-pipeline"],
      "complexity": ["basic"],
      "pro": true,
      "cloudpods": false
    },
    {
      "title": "Deploying a Database Migration Pipeline with DMS, Kinesis, and RDS MariaDB",
      "description": "Sample application demonstrating how to use Database Migration Service (DMS) to create change data capture (CDC) and full load tasks using the CDK in Python on LocalStack.",      
      "url": "https://github.com/localstack-samples/sample-dms-kinesis-rds-mariadb",
      "teaser": "https://raw.githubusercontent.com/localstack-samples/sample-dms-kinesis-rds-mariadb/main/dms-mariadb-to-kinesis.jpg",
      "services": ["dms", "kns", "rds"],
      "deployment": ["cdk"],
      "platform": ["python"],
      "tags": ["databases", "migration"],
      "complexity": ["intermediate"],
      "pro": true,
      "cloudpods": false
    }
  ]
}
