<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on Docs</title><link>/tutorials/</link><description>Recent content in Tutorials on Docs</description><generator>Hugo</generator><language>en</language><atom:link href="/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Schema Evolution with Glue Schema Registry and Managed Streaming for Kafka (MSK) using LocalStack</title><link>/tutorials/schema-evolution-glue-msk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/schema-evolution-glue-msk/</guid><description>Apache Kafka is an open-source distributed event store and stream-processing platform. It is used to capture data generated by producers and distribute it among its consumers. Kafka is known for its scalability, with reports of production environments scaling to trillions of messages per day. With Amazon Managed Streaming for Apache Kafka (MSK), AWS provides a service to provision Apache Kafka clusters easily.
LocalStack Pro supports Amazon Managed Streaming for Kafka (MSK), which enables you to spin up Kafka clusters on your local machine and test the integration of your applications with Amazon MSK.</description></item><item><title>Deploying Lambda container image locally with Elastic Container Registry (ECR) using LocalStack</title><link>/tutorials/lambda-ecr-container-images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/lambda-ecr-container-images/</guid><description>Lambda is a powerful serverless compute system that enables you to break down your application into smaller, independent functions. These functions can be deployed as individual units within the AWS ecosystem. Lambda offers seamless integration with various AWS services and supports multiple programming languages for different runtime environments. To deploy Lambda functions programmatically, you have two options: uploading a ZIP file containing your code and dependencies or packaging your code in a container image and deploying it through Elastic Container Registry (ECR).</description></item><item><title>Building a Java Notification app using AWS Java SDK, Simple Email Service (SES), and CloudFormation</title><link>/tutorials/java-notification-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/java-notification-app/</guid><description>Java is a popular platform for cloud applications that use Amazon Web Services. With the AWS Java SDK, Java developers can build applications that work with various AWS services, like Simple Email Service (SES), Simple Queue Service (SQS), Simple Notification Service (SNS), and more. Simple Email Service (SES) is a cloud-based email-sending service that enables developers to integrate email functionality into their applications running on AWS. SES allows developers to work without an on-prem Simple Mail Transfer Protocol (SMTP) system and send bulk emails to many recipients.</description></item><item><title>Setting up Elastic Load Balancing (ELB) Application Load Balancers using LocalStack, deployed via the Serverless framework</title><link>/tutorials/elb-load-balancing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/elb-load-balancing/</guid><description>Elastic Load Balancer (ELB) is a service that distributes incoming application traffic across multiple targets, such as EC2 instances, containers, IP addresses, and Lambda functions. ELBs can be physical hardware or virtual software components. They accept incoming traffic and distribute it across multiple targets in one or more Availability Zones. Using ELB, you can quickly scale your load balancer to accommodate changes in traffic over time, ensuring optimal performance for your application and workloads running on the AWS infrastructure.</description></item><item><title>Host a static website locally using Simple Storage Service (S3) and Terraform with LocalStack</title><link>/tutorials/s3-static-website-terraform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/s3-static-website-terraform/</guid><description>AWS Simple Storage Service (S3) is a proprietary object storage solution that can store an unlimited number of objects for many use cases. S3 is a highly scalable, durable and reliable service that we can use for various use cases: hosting a static site, handling big data analytics, managing application logs, storing web assets and much more!
With S3, you have unlimited storage with your data stored in buckets. A bucket refers to a directory, while an object is just another term for a file.</description></item><item><title>Creating reproducible machine learning applications using Cloud Pods for persistent state snapshots</title><link>/tutorials/reproducible-machine-learning-cloud-pods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/reproducible-machine-learning-cloud-pods/</guid><description>LocalStack Cloud Pods enable you to create persistent state snapshots of your LocalStack instance, which can then be versioned, shared, and restored. It allows next-generation state management and team collaboration for your local cloud development environment, which you can utilize to create persistent shareable cloud sandboxes. Cloud Pods works directly with the LocalStack CLI to save, merge, and restore snapshots of your LocalStack state. You can always tear down your LocalStack instance and restore it from a snapshot at any point in time.</description></item><item><title>Deploying containers on Elastic Container Service (ECS) clusters using Elastic Container Registry (ECR) and AWS Fargate, with LocalStack</title><link>/tutorials/ecs-ecr-container-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/ecs-ecr-container-app/</guid><description>Amazon Elastic Container Service (ECS) is a fully-managed container orchestration service that simplifies the deployment, management, and scaling of Docker containers on AWS. With support for two launch types, EC2 and Fargate, ECS allows you to run containers on your cluster of EC2 instances or have AWS manage your underlying infrastructure with Fargate. The Fargate launch type provides a serverless-like experience for running containers, allowing you to focus on your applications instead of infrastructure.</description></item><item><title>How To: Collaborative AWS local development with LocalStackâ€™s Cloud Pods</title><link>/tutorials/cloud-pods-collaborative-debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/cloud-pods-collaborative-debugging/</guid><description>Introduction By replicating environments, teams can share the exact conditions under which a bug occurs.
For developing AWS applications locally, the tool of choice is LocalStack, which can sustain a full-blown comprehensive stack. However, when issues appear, and engineers need a second opinion from a colleague, recreating the environment from scratch can leave details slipping through the cracks. This is where Cloud Pods come in, to encapsulate the state of the LocalStack instance and allow for seamless collaboration.</description></item><item><title>Replicating cloud resources locally with LocalStack's AWS Replicator extension</title><link>/tutorials/replicate-aws-resources-localstack-extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/replicate-aws-resources-localstack-extension/</guid><description>Introduction LocalStack&amp;rsquo;s core cloud emulator enables you to emulate various cloud services on your own local machine. This allows you to work on and test your cloud-based solutions without needing to connect to a remote cloud. However, sometimes you might need to smoothly switch between your local setup and actual cloud resources, especially in hybrid scenarios. This could be useful, for example, if you want to share a database with your local Lambda function, or if you require access to S3 files stored remotely while running a Glue ETL job locally.</description></item><item><title>Creating ephemeral application previews with LocalStack and GitHub Actions</title><link>/tutorials/ephemeral-application-previews/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/ephemeral-application-previews/</guid><description>Introduction LocalStack&amp;rsquo;s core cloud emulator allows you to set up your cloud infrastructure on your local machine. You can access databases, queues, and other managed services without needing to connect to a remote cloud provider. This speeds up your Software Development Life Cycle (SDLC) by making development and testing more efficient. Despite this, you still need a staging environment to do final acceptance tests before deploying your application to production.</description></item><item><title>End-to-End Testing in Gitlab CI with Testcontainers and LocalStack: Understanding Runners and Docker in Docker</title><link>/tutorials/gitlab_ci_testcontainers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/gitlab_ci_testcontainers/</guid><description>Introduction: Testcontainers &amp;amp; LocalStack Testcontainers is an open-source framework that provides lightweight APIs for bootstrapping local development and test dependencies with real services wrapped in Docker containers. Running tests with Testcontainers and LocalStack is crucial for AWS-powered applications because it ensures each test runs in a clean, isolated environment, providing consistency across all development and CI machines. LocalStack avoids AWS costs by emulating services locally, preventing exceeding AWS free tier limits, and eliminates reliance on potentially unstable external AWS services.</description></item><item><title>How To: Terraform Init Hooks for Automation &amp; Production-Identical Test Environments</title><link>/tutorials/using-terraform-with-testcontainers-and-localstack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/using-terraform-with-testcontainers-and-localstack/</guid><description>Introduction: The importance of integration testing and how to streamline it LocalStack is a robust tool that emulates a local AWS cloud stack, allowing engineers to test and develop apps using AWS services directly on their local environments. This tool is essential for enhancing developer experience, reducing development costs and increasing efficiency.
In LocalStack, initialization hooks are scripts that customize or initialize your LocalStack instance at different stages of its lifecycle.</description></item><item><title>Generate IAM Policies with LocalStack IAM Policy Stream</title><link>/tutorials/iam-policy-stream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/iam-policy-stream/</guid><description>Introduction When you&amp;rsquo;re developing cloud and serverless applications, you need to grant access to various AWS resources like S3 buckets and RDS databases. To handle this, you create IAM roles and assign permissions through policies. However, configuring these policies can be challenging, especially if you want to ensure minimal access of all principals to your resources.
LocalStack IAM Policy Stream automates the generation of IAM policies for your AWS API requests on your local machine.</description></item><item><title>Chaos Engineering: Route53 Failover</title><link>/tutorials/route-53-failover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/route-53-failover/</guid><description>Introduction LocalStack allows you to integrate and test Chaos API with Route53 to automatically divert users to a healthy secondary zone if the primary region fails, ensuring system availability and responsiveness. Route53&amp;rsquo;s health checks and traffic redirection enhance architecture resilience and ensure service continuity during regional outages, crucial for uninterrupted user experiences.
Note Route53 Failover and Chaos API is currently available as part of the Ultimate plan. If you&amp;rsquo;d like to try it out, please contact us to request access.</description></item><item><title>Chaos Engineering: Simulating Outages using Chaos API</title><link>/tutorials/simulating-outages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/simulating-outages/</guid><description>Introduction LocalStack Chaos API is capable of simulating infrastructure faults to allow conducting controlled chaos engineering tests on AWS infrastructure. Its purpose is to uncover vulnerabilities and improve system robustness. Chaos API offers a means to deliberately introduce failures and observe their impacts, helping developers to better equip their systems against actual outages.
Getting started In this tutorial we study the effects of outages on a sample AWS application. We use the Chaos API to simulate the outage and design a mitigation to make the application resilient against database outages.</description></item></channel></rss>