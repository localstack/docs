---
title: "Remote debugging"
date: 2021-09-27
weight: 5
description: >
  Attach a debugger to your lambdas from your IDE.
---

| Complexity   | ★☆☆☆☆             |
|--------------|-------------------|
| Time to read | 5 minutes         |
| Edition      | community/pro     |
| Platform     | any               |

## Covered Topics

* [Debugging JVM lambdas](#debugging-jvm-lambdas)
* Debugging Node lambdas (under development)
* Debugging Python lambdas (under development)

## Debugging JVM lambdas

### Configuring LocalStack service

1. Set `LAMBDA_JAVA_OPTS` with `jdwp` settings and expose the debug port
(you can use any other port of your choice):

```yaml
#docker-compose.yml

services:
  localstack:
    ...
    environment:
      ...
      - LAMBDA_JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5050
      - LAMBDA_DOCKER_FLAGS=-p 127.0.0.1:5050:5050
```

### Configuring IntelliJ IDEA

Open the `Run/Debug Configurations` window and create a new `Shell Script` with
the following content:

```shell
while [[ -z $(docker ps | grep :5050) ]]; do sleep 1; done
```

![Run/Debug Configurations](../img-inteliji-debugger-1.png)

This shell script should simplify the process a bit since the debugger server is not
immediately available (only once lambda container is up).

Then create a new `Remote JVM Debug` configuration and use the script from
above as a `Before launch` target:

![Run/Debug Configurations](../img-inteliji-debugger-2.png)

Now to debug your lambda function, simply click on the `Debug` icon with
`Remote JVM on LS Debug` configuration selected, and then invoke your
lambda function.

### Configuring Visual Studio Code

Make sure you installed the following extensions:
* [Language Support for Java(TM) by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java)
* [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug)

Add a new task by creating/modifying the `.vscode/tasks.json` file:

```json
{
    "version": "2.0.0",
    "tasks": [
        {
          "label": "Wait Remote Debugger Server",
          "type": "shell",
          "command": "while [[ -z $(docker ps | grep :5050) ]]; do sleep 1; done; sleep 1;"
        }
    ]
}
```

Create a new `launch.json` file or edit an existing one from the `Run and Debug` tab,
then add the following configuration:

```json
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "java",
            "name": "Remote JVM on LS Debug",
            "projectRoot": "${workspaceFolder}",
            "request": "attach",
            "hostName": "localhost",
            "preLaunchTask": "Wait Remote Debugger Server",
            "port": 5050
        }
    ]
}
```

Now to debug your lambda function, click on the `Debug` icon with
`Remote JVM on LS Debug` configuration selected, and then invoke your
lambda function.

## Debugging Node lambdas

> The documentation is under development

## Debugging Python lambdas

> The documentation is under development
