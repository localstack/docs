<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>References on Docs</title><link>/references/</link><description>Recent content in References on Docs</description><generator>Hugo</generator><language>en</language><atom:link href="/references/index.xml" rel="self" type="application/rss+xml"/><item><title>Lambda Provider Behavioral Changes</title><link>/references/lambda-provider-v2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/lambda-provider-v2/</guid><description/></item><item><title>Configuration</title><link>/references/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/configuration/</guid><description>LocalStack exposes various configuration options to control its behaviour.
These options can be passed to LocalStack as environment variables like so:
$ DEBUG=1 localstack start To facilitate interoperability, configuration variables can be prefixed with LOCALSTACK_ in docker. For instance, setting LOCALSTACK_PERSISTENCE=1 is equivalent to PERSISTENCE=1.
You can also use Profiles.
Configurations marked as Deprecated will be removed in the next major version. You can find previously removed configuration variables under Legacy.</description></item><item><title>Changelog</title><link>/references/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/changelog/</guid><description>Introduction This page documents the release notes for official LocalStack major and minor releases since LocalStack v1.0.0. If you are looking for information about nightly releases, preview features, or experimental features, pull the latest Docker image. The changelog is updated with every release. Updates that affect only LocalStack Web Application or features in preview or limited release may not be reflected.
Features under Development LocalStack uses the following terminology to communicate features under development:</description></item><item><title>IAM Coverage</title><link>/references/iam-coverage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/iam-coverage/</guid><description>Supported Services In principle, LocalStack supports all operations. However, not all services and their operations have been tested yet. The table below lists all IAM services and operations that have been tested, noting if they were ever denied or allowed during testing. It only includes operations performed with a principal, not as root, so test setups are excluded.
Name operation Access denied Access allowed acm ListCertificates Yes Yes apigateway DeleteRestApi No Yes apigateway CreateRestApi Yes Yes backup DescribeBackupVault Yes Yes batch CreateComputeEnvironment No Yes cloudformation ListStacks Yes Yes cloudwatch PutMetricData Yes Yes dynamodb DescribeTable No Yes dynamodb CreateTable Yes Yes dynamodb DeleteTable No Yes ecr DescribeImages Yes No efs DescribeFileSystems Yes Yes es DescribeElasticsearchDomains Yes Yes events DeleteEventBus No Yes events PutEvents Yes Yes events CreateEventBus Yes Yes kinesis CreateStream Yes Yes kinesis DeleteStream No Yes kms CreateKey Yes Yes kms DescribeKey Yes Yes lambda DeleteFunction No Yes lambda Invoke Yes Yes lambda GetLayerVersion Yes Yes lambda CreateFunction Yes Yes logs CreateLogGroup Yes Yes logs PutLogEvents No Yes logs CreateLogStream No Yes logs DeleteLogGroup No Yes redshift DescribeClusters Yes Yes redshift-data ListDatabases Yes Yes s3 UploadPart No Yes s3 GetObject Yes Yes s3 DeleteBucket No Yes s3 CreateBucket Yes Yes s3 ListBuckets Yes Yes s3 CreateMultipartUpload Yes Yes s3 CompleteMultipartUpload No Yes s3 DeleteObject No Yes s3 ListObjects Yes Yes s3 PutObject Yes Yes secretsmanager CreateSecret Yes Yes secretsmanager GetSecretValue Yes Yes secretsmanager DeleteSecret No Yes sns Publish No Yes sqs GetQueueAttributes Yes No sqs CreateQueue Yes Yes sqs SendMessage Yes Yes sqs ReceiveMessage Yes Yes sqs DeleteQueue No Yes stepfunctions DeleteStateMachine No Yes stepfunctions CreateStateMachine Yes Yes sts GetCallerIdentity No Yes Inter Service Enforcement Source Service Target Service Feature Operation Implemented Tested sns sqs SNS subscription sqs.</description></item><item><title>ARM64 Support</title><link>/references/arm64-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/arm64-support/</guid><description>Since version 0.13, LocalStack officially publishes a multi-architecture Docker manifest. This manifest contains links to a Linux AMD64 as well as a Linux ARM64 image.
Pulling the LocalStack image With the multi-arch Docker manifest, your Docker client (and therefore the LocalStack CLI) now automatically selects the image according to your platform: $ docker pull localstack/localstack You can check the architecture of the pulled image by using docker inspect: $ docker inspect localstack/localstack | jq &amp;#39;.</description></item><item><title>Credentials</title><link>/references/credentials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/credentials/</guid><description>Like AWS, LocalStack requires AWS credentials to be supplied in all API operations.
Access Key ID For root accounts, the choice of access key ID affects multi-account namespacing.
Access key IDs can be one of following patterns:
Accounts IDs You can specify a 12-digit number which will be taken by LocalStack as the account ID. For example, 112233445566.
Structured access key ID You can specify a structured key like LSIAQAAAAAAVNCBMPNSG (which translates to account ID 000000000042).</description></item><item><title>Cross-Account and Cross-Region Access</title><link>/references/cross-account-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/cross-account-access/</guid><description>LocalStack automatically namespaces all resources based on the account ID and, in some cases, the region. However, there are certain resource types that can be accessed across multiple accounts or regions. This document provides information to help design such setups.
Note Cross-account support in LocalStack is being actively developed. Please report any issues on our GitHub issue tracker. Cross-account/cross-region access happens when a client attempts to access a resource in another account or region than what it is configured with:</description></item><item><title>Custom TLS certificates</title><link>/references/custom-tls-certificates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/custom-tls-certificates/</guid><description>Background LocalStack sometimes performs on-demand fetching of resources from the public internet. This requires that LocalStack is able to access public URLs. If there is a proxy server in your network that uses a non-standard TLS certificate, LocalStack will not be able to download any files on demand. You may see errors in the logs relating to TLS such as &amp;ldquo;unable to get local issuer certificate&amp;rdquo;.
There are three options when running LocalStack:</description></item><item><title>Docker Images</title><link>/references/docker-images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/docker-images/</guid><description>LocalStack functions as a local “mini-cloud” operating system that runs inside a Docker container. LocalStack has multiple components, which include process management, file system abstraction, event processing, schedulers, and more. Running inside a Docker container, LocalStack exposes external network ports for integrations, SDKs, or CLI interfaces to connect to LocalStack APIs. The LocalStack &amp;amp; LocalStack Pro Docker images have been downloaded over 130+ million times and provide a multi-arch build compatible with AMD/x86 and ARM-based CPU architectures.</description></item><item><title>External Service Port Range</title><link>/references/external-ports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/external-ports/</guid><description>Introduction LocalStack provides local cloud services, such as OpenSearch or Elasticsearch, which might utilize external software bound to specific ports. This documentation discusses two approaches to access these external services within LocalStack and explores the concept of an external service port range.
Proxy Functionality for External Services LocalStack offers a proxy functionality to access external services indirectly. In this approach, LocalStack assigns local domains to the external services based on the individual service&amp;rsquo;s configuration.</description></item><item><title>Filesystem Layout</title><link>/references/filesystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/filesystem/</guid><description>This page describes the filesystem directory layout used internally by LocalStack.
Note This filesystem layout was introduced in LocalStack v1 and can be disabled by setting LEGACY_DIRECTORIES to 1. LocalStack uses following directory layout when running within a container.
/ ├── etc │ └── localstack │ └── init ├── usr │ └── lib │ └── localstack └── var └── lib └── localstack &amp;lt;- the LocalStack volume directory root ├── cache ├── lib ├── logs ├── state └── tmp Directory contents LocalStack volume directory /var/lib/localstack: the LocalStack volume directory root /var/lib/localstack/lib: variable packages (like extensions or lazy-loaded third-party dependencies) /var/lib/localstack/logs: logs for recent LocalStack runs /var/lib/localstack/state: contains the state of services if persistence is enabled (such as OpenSearch cluster data) /var/lib/localstack/tmp: temporary data that is not expected to survive LocalStack runs (may be cleared when LocalStack starts or stops) /var/lib/localstack/cache: temporary data that is expected to survive LocalStack runs (is not cleared when LocalStack starts or stops) Configuration /etc/localstack: configuration directory /etc/localstack/init: root directory for initialization hooks Static libraries /usr/lib/localstack: static third-party packages installed into the container images Note Previously, directories were individually configurable, e.</description></item><item><title>Initialization Hooks</title><link>/references/init-hooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/init-hooks/</guid><description>Lifecycle Stages and Hooks LocalStack has four well-known lifecycle phases or stages:
BOOT: the container is running but the LocalStack runtime has not been started START: the Python process is running and the LocalStack runtime is starting READY: LocalStack is ready to serve requests SHUTDOWN: LocalStack is shutting down You can hook into each of these lifecycle phases using custom shell or Python scripts. Each lifecycle phase has its own directory in /etc/localstack/init.</description></item><item><title>Internal Endpoints</title><link>/references/internal-endpoints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/internal-endpoints/</guid><description>LocalStack provides several internal endpoints for various local AWS services and LocalStack-specific features. These endpoints are not part of the official AWS API and are available in the /_localstack and /_aws paths. You can use curl or your favourite HTTP REST client to access endpoints.
You can start your LocalStack instance and go to http://localhost.localstack.cloud:4566/_localstack/swagger to browse the Swagger UI, visualize and interact with all the API&amp;rsquo;s resources implemented in LocalStack.</description></item><item><title>Logging</title><link>/references/logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/logging/</guid><description>LocalStack supports logging output and error reporting through the localstack CLI or a Docker/Docker Compose based setup. LocalStack&amp;rsquo;s logging setup allows you to:
Discover errors in your code during development &amp;amp; testing. Get visibility into how and why your API calls are failing. Figure out unexpected errors such as Lambda timeouts and more! With LocalStack logging, you can easily retrieve additional detail around errors using various configuration variables to specify the verbosity and the log level.</description></item><item><title>Multi-Account Setups</title><link>/references/multi-account-setups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/multi-account-setups/</guid><description>Note Please note that multi-accounts may not work for use-cases that have cross-account and cross-service access. See this issue for more information. LocalStack ships with multi-account support which allows namespacing based on AWS account ID.
LocalStack uses the value in the AWS Access Key ID field for the purpose of namespacing over account ID. For more information, see Credentials.
The Access Key ID field can be configured in the AWS CLI in multiple ways: please refer to AWS CLI documentation.</description></item><item><title>Podman</title><link>/references/podman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/podman/</guid><description>Introduction By default, the LocalStack CLI starts the LocalStack runtime inside a Docker container. Docker may not be available on your system, and a popular alternative is Podman which you can use to run LocalStack. Podman support is still experimental, and the following docs give you an overview of the current state.
From the Podman docs:
Podman is a daemonless, open source, Linux native tool designed to make it easy to find, run, build, share and deploy applications using Open Containers Initiative (OCI) Containers and Container Images.</description></item><item><title>Usage Tracking</title><link>/references/usage-tracking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/usage-tracking/</guid><description>Overview For license activations, we track the timestamp and the licensing credentials. We need to do this to make CI credits work. It is tracked regardless of whether the user disables event tracking since we collect this in the backend, not the client.
LocalStack usage statistics For Pro users, most of the information is collected to populate the Stack Insights dashboard. Collecting basic anonymized usage of AWS services helps us better direct engineering efforts to services that are used the most or cause the most issues.</description></item><item><title>Regions Coverage</title><link>/references/regions-coverage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/regions-coverage/</guid><description>Introduction LocalStack ships with multi-region support, enabling users to emulate different AWS regions and namespace resources based on the region. LocalStack supports a wide range of AWS regions, including commercial, government, and China regions, providing a realistic environment for development and testing across multiple regions on your local machine.
Supported Regions Region Code Supported Notes us-east-1 ✔️ Commonly used as the default region us-east-2 ✔️ us-west-1 ✔️ us-west-2 ✔️ ca-central-1 ✔️ ca-west-1 ✔️ Available in LocalStack Enterprise only eu-north-1 ✔️ eu-west-1 ✔️ eu-west-2 ✔️ eu-west-3 ✔️ eu-central-1 ✔️ eu-south-1 ✔️ eu-south-2 ✔️ eu-central-2 ✔️ ap-south-1 ✔️ ap-south-2 ✔️ ap-northeast-1 ✔️ ap-northeast-2 ✔️ ap-northeast-3 ✔️ ap-southeast-1 ✔️ ap-southeast-2 ✔️ ap-southeast-3 ✔️ ap-southeast-4 ✔️ ap-southeast-5 ✔️ Available in LocalStack Enterprise only ap-east-1 ✔️ sa-east-1 ✔️ af-south-1 ✔️ me-south-1 ✔️ me-central-1 ✔️ cn-north-1 ✔️ Available in LocalStack Enterprise only cn-northwest-1 ✔️ Available in LocalStack Enterprise only us-gov-east-1 ✔️ Available in LocalStack Enterprise only us-gov-west-1 ✔️ Available in LocalStack Enterprise only il-central-1 ✔️</description></item><item><title>API Key (Deprecated)</title><link>/references/api-key/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/api-key/</guid><description>Warning LocalStack is transitioning from API Keys to Auth Tokens for activation. Auth Tokens streamline license management and remove the need for developers to adjust their setup when license changes occur. For detailed information and guidance on migrating your LocalStack setup to Auth Tokens, please consult our Auth Token documentation. API Keys will remain functional for LocalStack Pro and Enterprise users till early 2025 After the sunsetting period, legacy API and legacy CI keys will no longer activate or work with LocalStack.</description></item></channel></rss>