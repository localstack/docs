<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Continuous Integration on Docs</title><link>/user-guide/ci/</link><description>Recent content in Continuous Integration on Docs</description><generator>Hugo</generator><language>en</language><atom:link href="/user-guide/ci/index.xml" rel="self" type="application/rss+xml"/><item><title>CircleCI</title><link>/user-guide/ci/circle-ci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/ci/circle-ci/</guid><description>Introduction CircleCI is a continuous integration and continuous delivery (CI/CD) platform which uses a configuration file (usually named .circleci/config.yml) to define the build, test, and deployment workflows. LocalStack supports CircleCI out of the box and can be easily integrated into your pipeline to run your tests against a local cloud emulator.
Snippets Start up LocalStack Default version: &amp;#39;2.1&amp;#39; orbs: localstack: localstack/platform@2.2 jobs: localstack-test: executor: localstack/default steps: - localstack/startup ... workflows: localstack-test: jobs: - localstack-test Async version: &amp;#39;2.</description></item><item><title>BitBucket</title><link>/user-guide/ci/bitbucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/ci/bitbucket/</guid><description>Introduction BitBucket Pipeline is a CI/CD tool that allows you to build, test, and deploy your code directly from BitBucket. This guide will show you how to use LocalStack in BitBucket Pipelines.
Setting up the BitBucket Pipeline When you want to integrate LocalStack into your job configuration, you just have to execute the following steps:
Specify the Docker Socket to allow the LocalStack container to access the Docker daemon. Export the AWS_ENDPOINT_URL environment variable to point to the LocalStack endpoint.</description></item><item><title>GitHub Actions</title><link>/user-guide/ci/github-actions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/ci/github-actions/</guid><description>This page contains easily customisable snippets to show you how to manage LocalStack in a GitHub Actions pipeline.
Snippets Start up Localstack - name: Start LocalStack uses: LocalStack/setup-localstack@v0.2.2 with: image-tag: &amp;#39;latest&amp;#39; install-awslocal: &amp;#39;true&amp;#39; Configuration To set LocalStack configuration options, you can use the configuration input parameter. For example, to set the DEBUG configuration option, you can use the following configuration:
- name: Start LocalStack uses: LocalStack/setup-localstack@v0.2.2 with: image-tag: &amp;#39;latest&amp;#39; install-awslocal: &amp;#39;true&amp;#39; configuration: DEBUG=1 You can add extra configuration options by separating them with a comma.</description></item><item><title>GitLab CI</title><link>/user-guide/ci/gitlab-ci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/ci/gitlab-ci/</guid><description>This page contains easily customisable snippets to show you how to manage LocalStack in a GitLab CI pipeline.
Snippets Start up Localstack Tip While working with a Docker-in-Docker (dind) setup, the Docker runner requires privileged mode. You must always use privileged = true in your GitLab CI&amp;rsquo;s config.toml file while setting up LocalStack in GitLab CI runners. For more information, see GitLab CI Docker-in-Docker documentation. For LocalStack versions before 3.0.0 Under test>variables, add:</description></item><item><title>CodeBuild</title><link>/user-guide/ci/codebuild/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/ci/codebuild/</guid><description>Introduction AWS CodeBuild is a managed AWS service for the build and testing phases of software development. CodeBuild allows you to define your build project, set the source code location, and handles the building and testing, while supporting various programming languages, build tools, and runtime environments. LocalStack supports CodeBuild out of the box and can be easily integrated into your pipeline to run your tests against a cloud emulator.
Requirement LocalStack depends on the Docker socket to emulate your infrastructure.</description></item><item><title>Travis CI</title><link>/user-guide/ci/travis-ci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/ci/travis-ci/</guid><description>This guide shows how to start and use LocalStack in your Travis CI jobs.
Setting up the Travis CI job When you want to integrate LocalStack into your job configuration, you just have to execute the following steps:
Install the LocalStack CLI (and maybe also awslocal). Make sure your LocalStack docker image is up-to-date by pulling the latest version. Use the LocalStack CLI to start LocalStack. Make sure to use the -d flag to start the LocalStack docker container in detached mode.</description></item></channel></rss>