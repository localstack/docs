<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Integrations on Docs</title><link>/user-guide/integrations/</link><description>Recent content in Integrations on Docs</description><generator>Hugo</generator><language>en</language><atom:link href="/user-guide/integrations/index.xml" rel="self" type="application/rss+xml"/><item><title>Architect</title><link>/user-guide/integrations/architect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/architect/</guid><description>Overview Architect enables you to quickly build large serverless apps without worrying about the underlying infrastructure. On this page we discuss how Architect and LocalStack can be used together. If you are adapting an existing configuration, you might be able to skip certain steps at your own discretion.
Example Setup To use Architect in conjunction with LocalStack, simply install the arclocal command (sources can be found here). $ npm install -g architect-local @architect/architect aws-sdk The arclocal command has the same usage as the arc command, so you can start right away.</description></item><item><title>AWS CDK</title><link>/user-guide/integrations/aws-cdk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/aws-cdk/</guid><description>Overview The AWS Cloud Development Kit (CDK) is an Infrastructure-as-Code (IaC) tool using general-purpose programming languages such as TypeScript/JavaScript, Python, Java, and .NET to programmatically define your cloud architecture on AWS.
AWS CDK CLI for LocalStack cdklocal is a thin wrapper script for using the AWS CDK library against local APIs provided by LocalStack.
Installation The cdklocal command line is published as an npm library:
# Install globally npm install -g aws-cdk-local aws-cdk # Verify it installed correctly cdklocal --version # e.</description></item><item><title>AWS Chalice</title><link>/user-guide/integrations/chalice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/chalice/</guid><description>AWS Chalice is a serverless micro framework used to develop and deploy your serverless applications on AWS resources. Chalice provides integrated functionality with most of the AWS Toolings like S3 Storage, Simple Queue Service, API Gateway and more. It offers a handy CLI interface that allows you to easily create, develop &amp;amp; deploy your serverless applications.
LocalStack offers an AWS Chalice client that allows you to interact with your Chalice applications locally.</description></item><item><title>AWS Command Line Interface (CLI)</title><link>/user-guide/integrations/aws-cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/aws-cli/</guid><description>Introduction The AWS Command Line Interface (CLI) is a unified tool for creating and managing AWS services via a command line interface. All CLI commands applicable to services implemented within LocalStack can be executed when operating against LocalStack.
You can use the AWS CLI with LocalStack using either of the following approaches:
AWS CLI LocalStack AWS CLI AWS CLI You can install aws by using the following command if it&amp;rsquo;s not already installed.</description></item><item><title>AWS Copilot CLI</title><link>/user-guide/integrations/copilot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/copilot/</guid><description>Overview The AWS Copilot CLI is a command line tool for developer, to release and operate containerized applications using the AWS services ECS, Fargate and App runner. Copilot CLI makes it very simple to deploy your application, without the need for manual configuration of the mentioned services.
Copilot Local copilotlocal is a fork of AWS Copilot CLI, where the endpoints for all services are redirected to http://localhost:4566. Using copilotlocal instead of copilot in your command line therefore ensures the deployment of your service on LocalStack instead of AWS.</description></item><item><title>AWS Serverless Application Model (SAM)</title><link>/user-guide/integrations/aws-sam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/aws-sam/</guid><description>Introduction The AWS Serverless Application Model (SAM) is an open-source framework for developing serverless applications. It uses a simplified syntax to define functions, APIs, databases, and event source mappings. When you deploy, SAM converts its syntax into AWS CloudFormation syntax, helping you create serverless applications more quickly.
LocalStack can work with SAM using the AWS SAM CLI for LocalStack. This CLI comes in the form of a samlocal wrapper script, which lets you deploy SAM applications on LocalStack.</description></item><item><title>Cloud Custodian</title><link>/user-guide/integrations/cloud-custodian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/cloud-custodian/</guid><description>Introduction Cloud Custodian is an open-source rules engine and cloud management tool designed to help organizations maintain security and compliance across their cloud environments. Cloud Custodian&amp;rsquo;s YAML DSL allows definition of rules to filter and tag resources, and then apply actions to those resources.
Cloud Custodian can be used to manage local AWS resources in LocalStack, resembling the live AWS environment, allowing you to test and validate your security policies locally.</description></item><item><title>Crossplane</title><link>/user-guide/integrations/crossplane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/crossplane/</guid><description>Overview Crossplane is a cloud-native control plane framework, which offers an extensible backend that enables orchestrating applications and infrastructure via declarative APIs and resource definitions.
Crossplane offers a native AWS provider which can be used to create and manage AWS cloud resources via the Crossplane platform. For example, it can be used to create S3 buckets, SQS queues, Lambda functions, among many other resources. Crossplane AWS provider supports a comprehensive set of some 900+ resource types.</description></item><item><title>DevContainers</title><link>/user-guide/integrations/devcontainers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/devcontainers/</guid><description>Overview DevContainers is a local tool to create a self-contained, reproducible and containerized development environment that you can setup to encapsulate your project with all its libraries and dependencies.
In this guide, you will learn how to use DevContainers with LocalStack. You can use the following two approaches to set up LocalStack with DevContainers:
LocalStack templates LocalStack feature LocalStack Templates LocalStack provides two different approaches for Templates which can be used via supporting tools.</description></item><item><title>eksctl</title><link>/user-guide/integrations/eksctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/eksctl/</guid><description>Introduction eksctl is a CLI tool for creating and managing EKS clusters, Amazon&amp;rsquo;s managed Kubernetes service. LocalStack supports running eksctl on LocalStack to create EKS clusters locally. LocalStack&amp;rsquo;s EKS spin up embedded Kubernetes clusters using K3s to allow you to use the EKS APIs in your local environment.
Note The support for eksctl is currently experimental and may not work in all cases. We are working on improving the support for eksctl in LocalStack.</description></item><item><title>Former2</title><link>/user-guide/integrations/former2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/former2/</guid><description>Introduction Former2 allows you to generate Infrastructure-as-Code (IaC) outputs using your pre-existing AWS resources. It uses the AWS JavaScript SDK to make relevant API calls, scans your infrastructure, and provides you with a resource list. You can then select the resources for which you want to generate IaC outputs. Former2 currently supports the following outputs:
CloudFormation Terraform Troposphere CDK V1 (Cfn Primitives) &amp;amp; CDK V2 (Cfn Primitives) (TypeScript, Python, Java, C#) CDK for Terraform (TypeScript) Pulumi (TypeScript) Diagrams With Former2, you can scan the resources within your LocalStack instance and produce Infrastructure-as-Code (IaC) outputs.</description></item><item><title>Gitpod</title><link>/user-guide/integrations/gitpod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/gitpod/</guid><description>Overview Gitpod is an open-source platform that enables remote software development via ephemeral workspaces. It provides an automated setup with cloud-based, remote developer environments connected with a developerâ€™s editing experience of choice. Gitpod allow users to codify their developer environment as code. With projects codified, you can spin up a new workspace, start coding and throw away the workspace when they are done!
LocalStack on Gitpod LocalStack allows you to set up a development environment with a cloud sandbox that can be used to test and develop cloud applications.</description></item><item><title>Kubernetes</title><link>/user-guide/integrations/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/kubernetes/</guid><description>Introduction Kubernetes is an open-source container orchestration platform that simplifies the deployment, scaling, and management of containerized applications. LocalStack can be deployed on Kubernetes using the LocalStack Helm chart.
Warning Creating shared/hosted LocalStack instances may have some licensing implications. For example, a valid license might be necessary for each user who interacts with the instance. If you have any questions or uncertainties regarding the licensing implications, we encourage you to contact us for further details.</description></item><item><title>LambdaTest HyperExecute</title><link>/user-guide/integrations/lambdatest-hyperexecute/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/lambdatest-hyperexecute/</guid><description>HyperExecute is a test orchestration platform designed to optimize the execution of automated tests in the cloud. It supports a wide range of testing frameworks and integrates seamlessly with CI/CD pipelines, such as GitHub Actions. You can use HyperExecute to run your LocalStack tests on your local machine or in the CI pipeline using a single configuration file.
Note LambdaTest provides specialized runners for LocalStack. The default runners don&amp;rsquo;t provide a Docker socket, which is required for LocalStack to work properly.</description></item><item><title>OpenShift</title><link>/user-guide/integrations/openshift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/openshift/</guid><description>Introduction OpenShift is a container orchestration platform as a service designed to simplify the deployment, scaling, and management of containerized applications. Built on Kubernetes, OpenShift provides a comprehensive set of tools and features that facilitate the orchestration, automation, and monitoring of containerized workloads.
With OpenShift, you can deploy LocalStack on a managed Kubernetes cluster, as a cloud sandbox that emulates various AWS services &amp;amp; APIs. This guide demonstrates how you can deploy LocalStack on OpenShift using Devfile.</description></item><item><title>Pulumi</title><link>/user-guide/integrations/pulumi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/pulumi/</guid><description>Introduction Pulumi&amp;rsquo;s SDK for infrastructure-as-code allows you to create, deploy, and manage AWS containers, serverless functions, and other infrastructure using popular programming languages. It supports a range of cloud providers, including AWS, Azure, Google Cloud, and Kubernetes.
LocalStack can integrate with Pulumi through the Pulumi configuration environment. There are two main methods to configure Pulumi for use with LocalStack:
Using the pulumilocal wrapper script which automatically configures service endpoints. Manually setting up the service endpoints in your Pulumi configuration, which requires ongoing maintenance.</description></item><item><title>Quarkus</title><link>/user-guide/integrations/quarkus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/quarkus/</guid><description>Introduction Quarkus is a Java framework optimized for cloud, serverless, and containerized environments. Quarkus leverages a Kubernetes Native Java stack tailored for GraalVM &amp;amp; OpenJDK HotSpot, which further builds on various Java libraries and standards.
Localstack is supported by Quarkus as a Dev service for Amazon Services. Quarkus Amazon Services automatically starts a LocalStack container in development mode and when running tests, and the extension client is configured automatically.
Getting started In this guide, we will demonstrate how you can create a service client for creating and managing Lambdas on LocalStack.</description></item><item><title>Self-managed Kafka cluster</title><link>/user-guide/integrations/kafka/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/kafka/</guid><description>LocalStack Pro supports AWS Managed Streaming for Kafka (MSK) and you can create Kafka clusters directly through the MSK API that will run in LocalStack. In some cases, you may want to run your own self-managed Kafka cluster and integrate it with your applications, like triggering Lambdas from a Kafka stream running in your own cluster. The Lambda integration with self-managed Kafka clusters is also a LocalStack Pro feature.
Running self-managed Kafka You can find the example Docker Compose file which contains a single-noded ZooKeeper and a Kafka cluster and a simple LocalStack setup as well as Kowl, an Apache Kafka Web UI.</description></item><item><title>Serverless Framework</title><link>/user-guide/integrations/serverless-framework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/serverless-framework/</guid><description>Overview This guide explains how to integrate LocalStack with the Serverless Framework. Although it probably requires a few code changes, integrating LocalStack with the Serverless Framework is fairly straightforward.
In particular, the setup consists of the following two steps.
Installing and configuring the Serverless-LocalStack plugin. Adjusting AWS endpoints in Lambda functions. Prerequisites This guide assumes that you have the following tools installed.
LocalStack (Install) Serverless (Install) It also assumes that you already have a Serverless app set up consisting of a couple of Lambda functions and a serverless.</description></item><item><title>Spring Cloud Function</title><link>/user-guide/integrations/spring-cloud-function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/spring-cloud-function/</guid><description>Overview In this guide, you will learn how to use LocalStack to test your serverless applications powered by Spring Cloud Function framework.
Note Some features and services described in this document may not work properly on aarch64, including Apple&amp;rsquo;s M1 silicon. Covered Topics We will create a new Rest API application that will route requests to a Cloud Function using functionRouter and routing expressions.
The primary language for the application is Kotlin powered by Gradle build tool, but the described concepts would work for any other JVM setup.</description></item><item><title>Terraform</title><link>/user-guide/integrations/terraform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/terraform/</guid><description>Introduction Terraform is an Infrastructure-as-Code (IaC) framework developed by HashiCorp. It enables users to define and provision infrastructure using a high-level configuration language. Terraform uses HashiCorp Configuration Language (HCL) as its configuration syntax. HCL is a domain-specific language designed for writing configurations that define infrastructure elements and their relationships.
LocalStack supports Terraform via the AWS provider through custom service endpoints. You can configure Terraform to use LocalStack in two ways:</description></item><item><title>Testcontainers</title><link>/user-guide/integrations/testcontainers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/integrations/testcontainers/</guid><description>Overview Testcontainers is a library that helps you to run your tests against real dependencies.
In this guide, you will learn how to use Testcontainers with LocalStack.
Covered Topics Installing the Localstack module Obtaining a LocalStack container Configuring the AWS client Special Setup for using RDS Useful Links Installing the Localstack module NuGet Go Java (Maven) Java (Gradle) NodeJS (npm) dotnet add package Testcontainers.LocalStack --version 3.0.0 go get github.com/testcontainers/testcontainers-go/modules/localstack &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item></channel></rss>