<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LocalStack Tools on Docs</title><link>/user-guide/tools/</link><description>Recent content in LocalStack Tools on Docs</description><generator>Hugo</generator><language>en</language><atom:link href="/user-guide/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing Utils</title><link>/user-guide/tools/testing-utils/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/testing-utils/</guid><description>Introduction LocalStack provides a set of tools to simplify application testing on LocalStack. These tools are available for Python and JVM (Java and Kotlin) and can be used to integrate with various unit testing frameworks and simplify the setup of AWS clients with LocalStack.
Python This Python Testing Utils streamlines the integration of Localstack with your unit tests.
Installation $ pip install localstack-utils Usage import time import boto3 import unittest from localstack_utils.</description></item><item><title>LocalSurf</title><link>/user-guide/tools/localsurf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/localsurf/</guid><description>Introduction LocalSurf is a Chrome browser plugin to repoint AWS service calls to LocalStack. While developing and testing AWS cloud Web applications locally with LocalStack, we need to make the browser connect to the local endpoint (http://localhost:4566) instead of the AWS production servers (*.amazonaws.com). LocalSurf enables you to use the production code without changes, and have the browser make requests to LocalStack instead of AWS directly by explicitly setting the endpoint attribute in the AWS JavaScript SDK.</description></item><item><title>LocalStack Desktop</title><link>/user-guide/tools/localstack-desktop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/localstack-desktop/</guid><description>LocalStack Desktop is a desktop client that allows users to easily control and interact with their LocalStack instance. Using LocalStack Desktop, users can start and stop their LocalStack instance with a single click, create a new container, view logs, interact with LocalStack container via cli and use our resource browser.
Note LocalStack Desktop replaces the previous LocalStack Cockpit application. Cockpit isn&amp;rsquo;t available or maintained anymore and we recommend you to use LocalStack Desktop instead.</description></item><item><title>LocalStack Docker Extension</title><link>/user-guide/tools/localstack-docker-extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/localstack-docker-extension/</guid><description>Introduction The LocalStack Extension for Docker Desktop enables developers working with LocalStack to operate their LocalStack container via Docker Desktop, including checking service status, container logs, and configuring profiles. To install the LocalStack Extension for Docker Desktop, you need to have Docker Desktop installed on your machine.
Installation To utilize LocalStack&amp;rsquo;s Docker Extension, it is necessary to have a recent version of Docker Desktop (v4.8 or higher) installed on the local machine.</description></item><item><title>Transparent Endpoint Injection</title><link>/user-guide/tools/transparent-endpoint-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/transparent-endpoint-injection/</guid><description>Introduction LocalStack provides Transparent Endpoint Injection, which enables seamless connectivity to LocalStack without modifying your application code targeting AWS. The DNS Server resolves AWS domains such as *.amazonaws.com including subdomains to the LocalStack container. Therefore, your application seamlessly accesses the LocalStack APIs instead of the real AWS APIs. For local testing, you might need to disable SSL validation as explained under Self-signed certificates.
Note This feature is enabled when the LocalStack DNS server is used.</description></item><item><title>DNS Server</title><link>/user-guide/tools/dns-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/dns-server/</guid><description>LocalStack includes a DNS server that enables seamless connectivity to LocalStack from different environments using localhost.localstack.cloud. The DNS server is available on all IPv4 addresses within the LocalStack container (i.e., listening to 0.0.0.0) and resolves localhost.localstack.cloud to the LocalStack container. Therefore, containers that are configured to use the DNS server can reach LocalStack using localhost.localstack.cloud. This configuration happens automatically for containers created by LocalStack, including compute resources such as Lambda, ECS, and EC2.</description></item><item><title>Event Studio</title><link>/user-guide/tools/event-studio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/event-studio/</guid><description>Introduction Event Studio allows users to view, collect, and inspect data exchanges, including event payloads and metadata, between AWS services. It enhances system observability by displaying the data exchanged at every stage, facilitating clear understanding of event flows. It further centralizes debugging by enabling event replay at any system stage for detailed analysis and troubleshooting. In addition, it serves as a single point of truth to understand potential errors, service configuration mismatches and IAM permission issues.</description></item><item><title>AWS Replicator</title><link>/user-guide/tools/aws-replicator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/aws-replicator/</guid><description>Introduction Infrastructure deployed on AWS often requires access to shared resources defined externally. For example a VPC defined by another team to contain the application infrastructure. This makes it harder to deploy applications into LocalStack as these resource dependencies must be deployed first. These dependencies may not live in IaC where deployment is easy, or accessing the IaC may not be easy. Some resources may be referred to by ARN, for example Secrets Manager secrets, but these ARNs are partly random meaning that simply creating a new resource in LocalStack will generate a resource with a different ARN.</description></item></channel></rss>