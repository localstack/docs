<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Enterprise Plan on Docs</title><link>/tags/enterprise-plan/</link><description>Recent content in Enterprise Plan on Docs</description><generator>Hugo</generator><language>en</language><atom:link href="/tags/enterprise-plan/index.xml" rel="self" type="application/rss+xml"/><item><title>Enterprise Image</title><link>/user-guide/localstack-enterprise/enterprise-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/localstack-enterprise/enterprise-image/</guid><description>Introduction LocalStack offers an Enterprise image that allows offline usage and includes a customer-specific configuration. This offline functionality is enabled by:
Pre-installed packages required for running specific services that are usually downloaded on demand (such as opensearch or dynamodb-local). A certificate keypair for localhost.localstack.cloud to resolve to the LocalStack container via our DNS server. An embedded decryption key in the image, eliminating the need to contact the license server to operate LocalStack.</description></item><item><title>SSO for Azure AD</title><link>/user-guide/localstack-enterprise/single-sign-on/azure-ad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/localstack-enterprise/single-sign-on/azure-ad/</guid><description>To configure SSO with an Azure AD Enterprise application, we provide a simple step-by-step solution below:
Navigate to &amp;ldquo;Set up single sign on&amp;rdquo; in your Azure AD Enterprise application.
In the Basic SAML Configuration, ensure that the settings match the following details
Take the correct values for Identifier (Entity ID) and Reply URL from the Identity Provider configuration page.
In the Attributes &amp;amp; Claims section, add a group claim with the following configuration and save it.</description></item><item><title>K8s Operator</title><link>/user-guide/localstack-enterprise/k8s-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/localstack-enterprise/k8s-operator/</guid><description>Introduction LocalStack K8s operator is a custom Kubernetes operator that offers LocalStack emulator as a native resource in Kubernetes environments. The operator is designed to simplify the deployment and management of LocalStack in Kubernetes clusters.
Installation To install the K8s operator, run the following commands:
$ kubectl apply -f https://raw.githubusercontent.com/localstack/localstack-k8s-operator/v0.2.0/release/crds.yaml $ kubectl apply -f https://raw.githubusercontent.com/localstack/localstack-k8s-operator/v0.2.0/release/controller.yaml You can then deploy a LocalStack instance by storing the following file content as localstack.yml and applying it against the cluster via kubectl apply -f localstack.</description></item><item><title>Enterprise Support</title><link>/user-guide/localstack-enterprise/enterprise-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/localstack-enterprise/enterprise-support/</guid><description>Introduction Enterprise support offers organizations personalized resources, direct communication channels with the LocalStack team, and flexible service level agreements (SLAs) to meet specific business requirements. The key components of our enterprise support offering include:
Direct Slack Connect Channel: A dedicated Slack Connect channel is available to maintain a direct communication link with the LocalStack engineering team. This setup ensures quick issue resolution and streamlined collaboration, improving overall service efficiency. Dedicated Customer Success Manager (CSM) and Technical Account Manager (TAM): Enterprise customers are assigned a CSM and SA.</description></item><item><title>Single-Sign On</title><link>/user-guide/localstack-enterprise/single-sign-on/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/localstack-enterprise/single-sign-on/</guid><description>Custom Single-Sign On (SSO) Identity providers, can be enabled to facilitate the process of quickly onboarding team members from your organization.
In order to configure SSO access, first sign in to the LocalStack Web application under app.localstack.cloud. In your profile settings, navigate to the Single Sign-on tab which will list existing SSO Identity Providers (if any exist).
Next, click the button to create a new identity provider (IdP), where you can choose between the two leading industry standards:</description></item><item><title>Kubernetes Executor</title><link>/user-guide/localstack-enterprise/kubernetes-executor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/localstack-enterprise/kubernetes-executor/</guid><description>Introduction LocalStack Enterprise provides a Kubernetes executor for various emulated services. It allows you to run these services as Kubernetes pods in your Kubernetes clusters. By default, LocalStack uses the docker backend for these services. You can use either service-specific configuration variables or the generic CONTAINER_RUNTIME variable set to kubernetes to enable the Kubernetes executor.
EC2 Kubernetes Executor The LocalStack Enterprise image allows you to run EC2 instances on Kubernetes. You can do so by setting the EC2_VM_MANAGER environment variable to kubernetes in the LocalStack container.</description></item><item><title>CI Analytics</title><link>/user-guide/localstack-enterprise/ci-analytics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/localstack-enterprise/ci-analytics/</guid><description>Introduction CI Analytics is a feature of LocalStack Web Application that allows users to get insights into their CI builds. CI Analytics unifies additional features, such as Cloud Pods &amp;amp; Stack Insights, and augments them with an integrated view of CI builds to provide users with insights and facilitate debugging. The features include:
CI Project Runs: Offers a unified view of all CI builds for a particular project. Log Output: Enables viewing of detailed logs for individual CI builds.</description></item><item><title>AWS Fault Injection Service</title><link>/user-guide/chaos-engineering/fault-injection-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/chaos-engineering/fault-injection-service/</guid><description>The Fault Injection Service (FIS) is a fully managed service by AWS designed to help you improve the resilience of your applications by simulating real-world outages and operational issues. This service allows you to conduct controlled experiments on your AWS infrastructure, injecting faults and observing how your system responds under various conditions.
By using the Fault Injection Service, you can identify weaknesses, test recovery procedures, and ensure that your applications can withstand unexpected disruptions.</description></item><item><title>Bedrock</title><link>/user-guide/aws/bedrock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/aws/bedrock/</guid><description>Introduction Bedrock is a fully managed service provided by Amazon Web Services (AWS) that makes foundation models from various LLM providers accessible via an API. LocalStack allows you to use the Bedrock APIs to test and develop AI-powered applications in your local environment. The supported APIs are available on our API Coverage Page, which provides information on the extent of Bedrock&amp;rsquo;s integration with LocalStack.
Getting started This guide is designed for users new to AWS Bedrock and assumes basic knowledge of the AWS CLI and our awslocal wrapper script.</description></item><item><title>Chaos API</title><link>/user-guide/chaos-engineering/chaos-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/chaos-engineering/chaos-api/</guid><description>Introduction LocalStack Chaos API allows you to mimic outages across any AWS region or service. Intentionally triggering service outages and monitoring the system&amp;rsquo;s response in situations where the infrastructure is compromised offers a powerful way to test. This strategy helps gauge the effectiveness of the system&amp;rsquo;s deployment procedures and its resilience against infrastructure disruptions, which is a key element of chaos engineering.
You can use LocalStack Chaos API to cause API failures for any combination of the following:</description></item><item><title>Chaos Engineering Dashboard</title><link>/user-guide/chaos-engineering/chaos-application-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/chaos-engineering/chaos-application-dashboard/</guid><description>Introduction The Chaos Engineering Dashboard in LocalStack offers streamlined testing for cloud applications, enabling you to simulate server errors, service outages, regional disruptions, and network latency with ease, ensuring your app is ready for real-world challenges.
The dashboard uses LocalStack Chaos API under the hood to offer a set of customizable templates that can be seamlessly integrated into any automation workflows.
You can find this feature in the LocalStack Web Application by navigating to app.</description></item><item><title>Database Migration Service (DMS)</title><link>/user-guide/aws/dms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/aws/dms/</guid><description>Introduction AWS Database Migration Service provides migration solution from databases, data warehouses, and other type of data stores (e.g. S3, SAP). The migration can be homogeneous (source and target have the same type), but often times is heterogeneous as it supports migration from various sources to various targets (self-hosted and AWS services).
LocalStack only supports selected use cases for DMS at the moment. The supported APIs are available on our API coverage page, which provides information on the extent of DMS integration with LocalStack.</description></item><item><title>Fault Injection Service (FIS)</title><link>/user-guide/aws/fis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/aws/fis/</guid><description>Introduction Fault Injection Service (FIS) is a service provided by Amazon Web Services that enables you to test the resilience of your applications and infrastructure by injecting faults and failures into your AWS resources. FIS simulates faults such as resource unavailability and service errors to assess the impact on your application&amp;rsquo;s performance and availability. The full list of such possible fault injections is available in the AWS docs.
LocalStack allows you to use the FIS APIs in your local environment to introduce faults in other services, in order to check how your setup behaves when parts of it stop working locally.</description></item></channel></rss>